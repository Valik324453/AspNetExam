@page "/cart"
@using UseCases

@inject IViewProductsUseCase ViewProductsUseCase
@inject IDeleteFromCartUseCase DeleteFromCartUseCase
@inject NavigationManager NavigationManager

@if (cart.Count != 0)
{
<h3>Cart</h3>


       <table class="table">
        <thead>
            <tr>
                <th>Model</th>
                <th>Manufacturer</th>
                <th>Price</th>
                <th>Available</th>
                <th>Quantity</th>
                <th>Price sum</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cartItem in cart)
            {
                currentCount = 1;
                <tr>
                    <td>@cartItem.Title</td>
                    <td>@cartItem.Manufacturer</td>
                    <td>@cartItem.Price</td>
                    <td>@cartItem.Stock</td>
                    <td>@cartItem.Qnt
                    
                        <HxButtonGroup>
                            <HxButton Size="ButtonSize.Small" Text="-" Color="ThemeColor.Secondary" Outline="true" @onclick="@(() => SubQnt(cartItem))"/>
                            <HxButton Size="ButtonSize.Small" Text="+" Color="ThemeColor.Secondary" Outline="true" @onclick="@(() => AddQnt(cartItem))"/>
                        </HxButtonGroup>
                    </td>

                    <td>@(cartItem.Price * cartItem.Qnt)</td>

                    <td>
                       
                        <button type="button" class="btn btn-danger" @onclick="@(() => RemoveFromCart(cartItem.Id))">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <p>Total sum: @TotalSum()</p>
}
else
{
    <h3>Cart is empty</h3>
}

@code {
    private List<Product> cart;
    private int currentCount = 1;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        cart = ViewProductsUseCase.CreateCart().ToList();
    }

    private void RemoveFromCart(int productId)
    {
        DeleteFromCartUseCase.Execute(productId);
        cart = ViewProductsUseCase.CreateCart().ToList();
    }

    private void SubQnt(Product cartItem)
    {
        if (cartItem.Qnt > 1)
        {
            cartItem.Qnt -= 1;
        }
        else
        {
            cartItem.Qnt = 1;
        }

    }

    private void AddQnt(Product cartItem)
    {
        if (cartItem.Qnt < cartItem.Stock)
        {
            cartItem.Qnt += 1;
        }
    }

    private decimal TotalSum()
    {
        decimal sum = 0;
        foreach (var cartItem in cart)
        {
            sum += cartItem.Qnt * cartItem.Price;
        }
        return sum;
    }


   
}
